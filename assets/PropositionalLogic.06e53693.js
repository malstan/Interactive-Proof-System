import{r as g,N as h,O,a0 as f,$ as b,V as I,R as o,j as a,_ as F,U as m,W as q,au as j,F as Z,S as ee,z as te,av as ie,aw as E,P as H,w as G,I as fe}from"./index.7a9aee17.js";import{Q as me}from"./rtl.c3a50cee.js";import{Q as Y,a as ne,b as re,_ as be,c as ge,d as he,e as _e}from"./QScrollArea.102c494b.js";import{Q as ye}from"./QPage.5bb437e5.js";import{_ as le}from"./FormulaInput.084e72ff.js";import{P as se}from"./propositionalLogicStore.70675551.js";import{g as K,a as $e,b as ke,c as we,v as ce}from"./propositionalFormulaProcessor.f817c64b.js";import{i as e}from"./index.1dc78791.js";import{Q as P,a as W,b as J}from"./QCard.c624f0a0.js";import{d as oe,e as de,f as ue}from"./QMenu.9f96130d.js";import{n as L,Q as xe}from"./nearley.9879b3e6.js";import"./use-dark.5477e6d4.js";import"./position-engine.b7c92e96.js";import"./touch.47903efd.js";const qe=[{rule:"gsk-tree-id",label:e.global.t("rules.identity.label"),desc:`${e.global.t("rules.identity.title")} (id)`,tree:' <div class="q-ma-sm rule"> <div class="rule__border-top"> <span>\u2126, \u03D5 \u22A2 \u039B, \u03D5</span> <span class="rule__border-top__rule-name">(id)</span> </div> </div>'},{rule:"gsk-tree-nl",label:e.global.t("rules.negation.left.label"),desc:`${e.global.t("rules.negation.left.title")} (\xACl)`,tree:'<div class="q-ma-sm rule"> <div>\u2126 \u22A2 \u039B, \u03D5</div> <div class="rule__border-top"> <span>\u2126, \xAC\u03D5 \u22A2 \u039B</span> <span class="rule__border-top__rule-name">(\xACl)</span> </div> </div>'},{rule:"gsk-tree-nr",label:e.global.t("rules.negation.right.label"),desc:`${e.global.t("rules.negation.right.title")} (\xACr)`,tree:'<div class="q-ma-sm rule"> <div>\u2126, \u03D5 \u22A2 \u039B</div> <div class="rule__border-top"> <span>\u2126 \u22A2 \u039B, \xAC\u03D5</span> <span class="rule__border-top__rule-name">(\xACr)</span> </div> </div>'},{rule:"gsk-tree-cl1",label:e.global.t("rules.conjunction.left.label1"),desc:`${e.global.t("rules.conjunction.left.title")} (\u2227l1)`,tree:'<div class="q-ma-sm rule"> <div>\u2126, \u03D5 \u22A2 \u039B</div> <div class="rule__border-top"> <span>\u2126, \u03D5 \u2227 \u03C8 \u22A2 \u039B</span> <span class="rule__border-top__rule-name">(\u2227l1)</span> </div> </div>'},{rule:"gsk-tree-cl2",label:e.global.t("rules.conjunction.left.label2"),desc:`${e.global.t("rules.conjunction.left.title")} (\u2227l2)`,tree:' <div class="q-ma-sm rule"> <div>\u2126, \u03C8 \u22A2 \u039B</div> <div class="rule__border-top"> <span>\u2126, \u03D5 \u2227 \u03C8 \u22A2 \u039B</span> <span class="rule__border-top__rule-name">(\u2227l2)</span> </div> </div>'},{rule:"gsk-tree-cr",label:e.global.t("rules.conjunction.right.label"),desc:`${e.global.t("rules.conjunction.right.title")} (\u2227r)`,tree:'<div class="q-ma-sm rule"> <div class="rule__siblings"> <div>\u2126 \u22A2 \u039B, \u03D5</div> <div>\u2126 \u22A2 \u039B, \u03C8</div> </div> <div class="rule__border-top"> <span>\u2126 \u22A2 \u039B, \u03D5 \u2227 \u03C8</span> <span class="rule__border-top__rule-name">(\u2227r)</span> </div> </div>'},{rule:"gsk-tree-dl",label:e.global.t("rules.disjunction.left.label"),desc:`${e.global.t("rules.disjunction.left.title")} (\u2228l)`,tree:'<div class="q-ma-sm rule"> <div class="rule__siblings"> <div>\u2126, \u03D5 \u22A2 \u039B</div> <div>\u2126, \u03C8 \u22A2 \u039B</div> </div> <div class="rule__border-top"> <span>\u2126, \u03D5 \u2228 \u03C8 \u22A2 \u039B</span> <span class="rule__border-top__rule-name">(\u2228l)</span> </div> </div>'},{rule:"gsk-tree-dr1",label:e.global.t("rules.disjunction.right.label1"),desc:`${e.global.t("rules.disjunction.right.title")} (\u2228r1)`,tree:'<div class="q-ma-sm rule"> <div>\u2126 \u22A2 \u039B, \u03D5</div> <div class="rule__border-top"> <span>\u2126 \u22A2 \u039B, \u03D5 \u2228 \u03C8</span> <span class="rule__border-top__rule-name">(\u2228r1)</span> </div> </div>'},{rule:"gsk-tree-dr2",label:e.global.t("rules.disjunction.right.label2"),desc:`${e.global.t("rules.disjunction.right.title")} (\u2228r2)`,tree:' <div class="q-ma-sm rule"> <div>\u2126 \u22A2 \u039B, \u03C8</div> <div class="rule__border-top"> <span>\u2126 \u22A2 \u039B, \u03D5 \u2228 \u03C8</span> <span class="rule__border-top__rule-name">(\u2228r2)</span> </div> </div>'},{rule:"gsk-tree-il",label:e.global.t("rules.implication.left.label"),desc:`${e.global.t("rules.implication.left.title")} (\u21D2l)`,tree:`<div class="q-ma-sm rule"> <div class="rule__siblings"> <div>\u2126 \u22A2 \u039B, \u03D5</div> <div>\u2126' , \u03C8 \u22A2 \u039B'</div> </div> <div class="rule__border-top"> <span>\u2126, \u2126' , \u03D5 \u21D2 \u03C8 \u22A2 \u039B, \u039B'</span> <span class="rule__border-top__rule-name">(\u21D2l)</span> </div> </div>`},{rule:"gsk-tree-ir",label:e.global.t("rules.implication.right.label"),desc:`${e.global.t("rules.implication.right.title")} (\u21D2r)`,tree:'<div class="q-ma-sm rule"> <div>\u2126, \u03D5 \u22A2 \u039B, \u03C8</div> <div class="rule__border-top"> <span>\u2126 \u22A2 \u039B, \u03D5 \u21D2 \u03C8</span> <span class="rule__border-top__rule-name">(\u21D2r)</span> </div> </div>'},{rule:"gsk-tree-wl",label:e.global.t("rules.weakening.left.label"),desc:`${e.global.t("rules.weakening.left.title")} (wl)`,tree:'<div class="q-ma-sm rule"> <div>\u2126 \u22A2 \u039B</div> <div class="rule__border-top"> <span>\u2126, \u03D5 \u22A2 \u039B</span> <span class="rule__border-top__rule-name">(wl)</span> </div> </div>'},{rule:"gsk-tree-wr",label:e.global.t("rules.weakening.right.label"),desc:`${e.global.t("rules.weakening.right.title")} (wr)`,tree:'<div class="q-ma-sm rule"> <div>\u2126 \u22A2 \u039B</div> <div class="rule__border-top"> <span>\u2126 \u22A2 \u039B, \u03D5 </span> <span class="rule__border-top__rule-name">(wr)</span> </div> </div>'},{rule:"gsk-tree-col",label:e.global.t("rules.contraction.left.label"),desc:`${e.global.t("rules.contraction.left.title")} (cl)`,tree:'<div class="q-ma-sm rule"> <div>\u2126, \u03D5, \u03D5 \u22A2 \u039B</div> <div class="rule__border-top"> <span>\u2126, \u03D5 \u22A2 \u039B </span> <span class="rule__border-top__rule-name">(cl)</span> </div> </div>'},{rule:"gsk-tree-cor",label:e.global.t("rules.contraction.right.label"),desc:`${e.global.t("rules.contraction.right.title")} (cr)`,tree:'<div class="q-ma-sm rule"> <div>\u2126 \u22A2 \u03D5, \u03D5,\u039B</div> <div class="rule__border-top"> <span>\u2126 \u22A2 \u03D5,\u039B</span> <span class="rule__border-top__rule-name">(cr)</span> </div> </div>'},{rule:"gsk-tree-cut",label:e.global.t("rules.cut.label"),desc:`${e.global.t("rules.cut.title")} (cut)`,tree:`<div class="q-ma-sm rule"> <div class="rule__siblings"> <div><span toReplace>\u2126 \u22A2 \u039B, </span> <span toInput>\u03D5</span></div> <div><span toInput>\u03D5</span> <span toReplace>\u2126', \u03D5 \u22A2 \u039B'</span></div> </div> <div class="rule__border-top"> <span toReplace>\u2126, \u2126' \u22A2 \u039B, \u039B'</span> <span class="rule__border-top__rule-name">(cut)</span> </div> </div>`},{rule:"gsk-tree-exl",label:e.global.t("rules.exchange.left.label"),desc:`${e.global.t("rules.exchange.left.title")} (exl)`,tree:' <div class="q-ma-sm rule"> <div>\u2126, \u03D5, \u03C8, \u2126 0 \u22A2 \u039B</div> <div class="rule__border-top"> <span>\u2126, \u03C8, \u03D5, \u2126 0 \u22A2 \u039B</span> <span class="rule__border-top__rule-name">(exl)</span> </div> </div>'},{rule:"gsk-tree-exr",label:e.global.t("rules.exchange.right.label"),desc:`${e.global.t("rules.exchange.right.title")} (exr)`,tree:' <div class="q-ma-sm rule"> <div>\u2126 \u22A2 \u039B, \u03D5, \u03C8,\u039B 0</div> <div class="rule__border-top"> <span>\u2126 \u22A2 \u039B, \u03C8, \u03D5,\u039B 0 </span> <span class="rule__border-top__rule-name">(exr)</span> </div> </div>'}],Ie={class:"text-h6 q-mb-md"},Fe={class:"text-body1"},Ce={class:"text-body1"},je={class:"text-body1"},Pe=["innerHTML"],Le={class:"text-body1"},Ee={class:"text-body1"},Re=["innerHTML"],Ve={__name:"PL-sequentCalculus-tree-rules",setup(ae){const l=se(),C=g(""),y=g(!1),v=g(""),w=g(""),x=g([]),$=g(""),k=g(void 0),S=g(""),Q=g(null),V=g(null),U=g(!1),A=g(!1),D=g(!1),B=g(!1);async function X(t){y.value=!0,C.value=t.label;let i=await c();if(!i){u();return}let n,p,N;if(t.value=="gsk-tree-cut"){if(n=await s(i,t.tree),n==!1){u(),E.create({type:"negative",message:e.global.t("messages.invalidInput")+t.label+"."});return}}else if(t.value=="gsk-tree-exl"||t.value=="gsk-tree-exr"){if(p=await R(i,t),p==!1){u();return}}else if(N=await _(i,t.value),!Number.isInteger(N)||N===!1){u();return}const M=new L.Parser(L.Grammar.fromCompiled(K)),T=await $e(t.value,i,M.feed(i.replace(" ","")).results[0],N,n,p);Array.isArray(T)?(E.create({type:"positive",message:e.global.t("messages.rule")+t.label+e.global.t("messages.applyed")+i+"."}),l.setSameLeaves(l.getLeaves.length!=new Set(l.getLeaves).size),l.addToHistory(),l.spliceLeaves(i),l.addFormulaToProof(l.proof,T),H.set("pl-proof",l.getProof),T[1].forEach(z=>{z!=""&&l.pushLeaf(z)}),H.set("pl-leaves",l.getLeaves),l.resetSameLeaves()):E.create({type:"negative",message:e.global.t("messages.rule")+t.label+e.global.t("messages.notApplyed")+i+"."}),u()}function u(){v.value="",w.value="",$.value="",y.value=!1}function c(){const t=l.getLeaves;return t.length>1?(U.value=!0,new Promise((i,n)=>{const p=G([v,y],([N,M])=>{N!==""&&(U.value=!1,i(N),p()),M==!1&&(U.value=!1,i(!1),p())})})):t[0]}function _(t,i){let n;return i.split("-")[2].includes("r")?n=t.split("\u22A2")[1]:n=t.split("\u22A2")[0],n.includes(",")?(A.value=!0,x.value=[],n.split(",").filter(p=>p!="").forEach((p,N)=>{x.value.push({value:N,label:p})}),v.value==""&&(v.value=l.getLeaves[0]),new Promise((p,N)=>{const M=G([w,y],([T,z])=>{T!==""&&(A.value=!1,p(T.value),M()),z==!1&&(A.value=!1,p(!1),M())})})):0}function d(t,i,n){return t.replace(/<span toReplace>(.*?)<\/span>/g,i).replace(/<span toInput>(.*?)<\/span>/g,`<span class="rule__input">${n}</span>`).replace(/<span toDelete>(.*?)<\/span>/g,"")}async function s(t,i){D.value=!0,S.value=d(i,t,""),G($,p=>{S.value=d(i,t,p.length>1?`(${p})`:p)});const n=await new Promise((p,N)=>{const M=G(k,T=>{T&&(k.value=void 0,D.value=!1,p($.value),M()),T==!1&&(k.value=void 0,D.value=!1,p(!1),M())})});if(n){const p=new L.Parser(L.Grammar.fromCompiled(K));try{p.feed(n.replace(" ",""))}catch{return E.create({type:"negative",message:e.global.t("messages.formulaIsNotOK")}),!1}return n}else return!1}function r(t){const i=new L.Parser(L.Grammar.fromCompiled(K));try{if(i.feed(t.replace(" ","")),i.results.length===0)throw new Error("Formula is not valid.")}catch{return!1}return i.results}function R(t,i){let n=i.value=="gsk-tree-exl"?t.split("\u22A2")[0]:t.split("\u22A2")[1];return n=n.split(",").filter(p=>p!=""),n.length<2?(E.create({type:"negative",message:e.global.t("messages.nothingToExchange")+i.label+"."}),!1):(n=n.map(p=>({label:p,disable:!1})),x.value=[],x.value=n,new Promise((p,N)=>{B.value=!0;const M=G([Q,V,y],([T,z,ve])=>{if(T&&z){const pe={first:T.label,second:z.label};Q.value=null,V.value=null,B.value=!1,p(pe),M()}ve==!1&&(Q.value=null,V.value=null,B.value=!1,p(!1),M())})}))}return(t,i)=>(h(),O("div",null,[f("div",Ie,b(t.$t("rules.scTree")),1),U.value?(h(),I(J,{key:0,class:"my-card q-my-lg"},{default:o(()=>[a(P,null,{default:o(()=>[f("p",Fe,[F(b(t.$t("rules.chooseLeaf"))+" ",1),f("strong",null,b(C.value),1),F(". ")])]),_:1}),a(P,null,{default:o(()=>[a(Y,{modelValue:v.value,"onUpdate:modelValue":i[0]||(i[0]=n=>v.value=n),options:m(l).getLeaves,label:t.$t("rules.leaves")},null,8,["modelValue","options","label"])]),_:1}),a(W,{align:"right"},{default:o(()=>[a(q,{label:t.$t("labels.cancel"),onClick:i[1]||(i[1]=n=>y.value=!1)},null,8,["label"])]),_:1})]),_:1})):j("",!0),A.value?(h(),I(J,{key:1,class:"my-card q-my-lg"},{default:o(()=>[a(P,null,{default:o(()=>[f("p",Ce,[F(b(t.$t("rules.chooseFormula"))+" ",1),f("strong",null,b(v.value),1),F(" "+b(t.$t("rules.chooseFormulaFor"))+" ",1),f("strong",null,b(C.value),1),F(". ")])]),_:1}),a(P,null,{default:o(()=>[a(Y,{modelValue:w.value,"onUpdate:modelValue":i[2]||(i[2]=n=>w.value=n),options:x.value,"option-label":n=>n.label,label:`${t.$t("rules.formulasInLeaf")} ${v.value}`},null,8,["modelValue","options","option-label","label"])]),_:1}),a(W,{align:"right"},{default:o(()=>[a(q,{label:t.$t("labels.cancel"),onClick:i[3]||(i[3]=n=>y.value=!1)},null,8,["label"])]),_:1})]),_:1})):j("",!0),D.value?(h(),I(J,{key:2,class:"my-card q-my-lg"},{default:o(()=>[a(P,null,{default:o(()=>[f("p",je,[F(b(t.$t("rules.inputFormula"))+" ",1),f("strong",null,b(C.value),1),F(". ")])]),_:1}),a(P,null,{default:o(()=>[f("div",{innerHTML:S.value},null,8,Pe)]),_:1}),a(P,null,{default:o(()=>[a(le,{modelValue:$.value,"onUpdate:modelValue":i[4]||(i[4]=n=>$.value=n),validateFormula:r},null,8,["modelValue"])]),_:1}),a(W,{align:"right"},{default:o(()=>[a(q,{label:t.$t("labels.cancel"),onClick:i[5]||(i[5]=()=>{k.value=!1,y.value=!1})},null,8,["label"]),a(q,{label:t.$t("labels.use"),onClick:i[6]||(i[6]=n=>k.value=!0)},null,8,["label"])]),_:1})]),_:1})):j("",!0),B.value?(h(),I(J,{key:3,class:"my-card q-my-lg"},{default:o(()=>[a(P,null,{default:o(()=>{var n,p;return[f("p",Le,[F(b(t.$t("rules.chooseFormula"))+" ",1),f("strong",null,b(v.value),1),F(" "+b(t.$t("rules.chooseFormulaFor"))+" ",1),f("strong",null,b(C.value),1),F(". ")]),f("p",Ee,b(t.$t("rules.formula"))+" "+b(((n=Q.value)==null?void 0:n.label)||"__")+" "+b(t.$t("rules.exchang"))+" "+b(((p=V.value)==null?void 0:p.label)||"__")+". ",1)]}),_:1}),a(P,null,{default:o(()=>[a(Y,{modelValue:Q.value,"onUpdate:modelValue":[i[7]||(i[7]=n=>Q.value=n),i[8]||(i[8]=n=>{x.value.forEach(p=>p.disable=!1),n.disable=!0})],options:x.value,label:`${t.$t("rules.formulasInLeaf")} ${v.value}`},null,8,["modelValue","options","label"]),a(Y,{modelValue:V.value,"onUpdate:modelValue":i[9]||(i[9]=n=>V.value=n),options:x.value,label:`${t.$t("rules.formulasInLeaf")} ${v.value}`},null,8,["modelValue","options","label"])]),_:1}),a(W,{align:"right"},{default:o(()=>[a(q,{label:t.$t("labels.cancel"),onClick:i[10]||(i[10]=n=>y.value=!1)},null,8,["label"])]),_:1})]),_:1})):j("",!0),a(re,{class:"q-mx-auto",style:{height:"600px","max-width":"500px"}},{default:o(()=>[a(oe,{bordered:"",separator:"",style:{"border-radius":"4px"}},{default:o(()=>[(h(!0),O(Z,null,ee(m(qe),n=>te((h(),I(de,{key:n.rule,clickable:"",class:"q-py-md",onClick:p=>X({value:n.rule,label:n.label,tree:n.tree}),disable:!m(l).isProving||y.value},{default:o(()=>[a(ue,{top:""},{default:o(()=>[a(ne,{class:"text-body1 text-primary"},{default:o(()=>[F(b(n.desc),1)]),_:2},1024),f("div",{class:"flex",innerHTML:n.tree},null,8,Re)]),_:2},1024)]),_:2},1032,["onClick","disable"])),[[ie]])),128))]),_:1})]),_:1})]))}},Ne=[{rule:"nd-tree-vi",label:e.global.t("rules.verum.intro.label"),desc:`${e.global.t("rules.verum.intro.title")} (\u22A4I)`,tree:'<div class="q-ma-sm rule"><div class="rule__border-top"><span>\u22A4</span><span class="rule__border-top__rule-name">(\u22A4I)</span></div></div>'},{rule:"nd-tree-ae1",label:e.global.t("rules.absurdum.elimination.label1"),desc:`${e.global.t("rules.absurdum.elimination.title")} (\u22A5E1)`,tree:'<div class="q-ma-sm rule"><div>\u22A5</div><div class="rule__border-top"><span>\u03D5</span><span class="rule__border-top__rule-name">(\u22A5E1)</span></div></div>'},{rule:"nd-tree-ae2",label:e.global.t("rules.absurdum.elimination.label2"),desc:`${e.global.t("rules.absurdum.elimination.title")} (\u22A5E2)`,tree:'<div class="q-ma-sm rule"><div class="rule__hypo"><div>[\xAC\u03D5]</div><div class="rule__hypo__dots"><span>.</span> <span>.</span> <span>.</span> </div> </div> <div>\u22A5</div> <div class="rule__border-top"> <span>\u03D5</span> <span class="rule__border-top__rule-name">(\u22A5E2)</span> </div> </div>'},{rule:"nd-tree-ni",label:e.global.t("rules.negation.intro.label"),desc:`${e.global.t("rules.negation.intro.title")} (\xACI)`,tree:'<div class="q-ma-sm rule"> <div class="rule__hypo"> <div>[\u03D5]</div> <div class="rule__hypo__dots"> <span>.</span> <span>.</span> <span>.</span> </div> </div> <div>\u22A5</div> <div class="rule__border-top"> <span>\xAC\u03D5</span> <span class="rule__border-top__rule-name">(\xACI)</span> </div> </div>'},{rule:"nd-tree-ne",label:e.global.t("rules.negation.elimination.label"),desc:`${e.global.t("rules.negation.elimination.title")} (\xACE)`,tree:'<div class="q-ma-sm rule"> <div class="rule__siblings"> <div><span toInput>\u03D5</span></div> <div>\xAC<span toInput>\u03D5</span></div> </div> <div class="rule__border-top"> <span>\u22A5</span> <span class="rule__border-top__rule-name">(\xACE)</span> </div> </div>'},{rule:"nd-tree-ci",label:e.global.t("rules.conjunction.intro.label"),desc:`${e.global.t("rules.conjunction.intro.title")} (\u2227I)`,tree:'<div class="q-ma-sm rule"> <div class="rule__siblings"> <div>\u03D5</div> <div>\u03C8</div> </div> <div class="rule__border-top"> <span>\u03D5 \u2227 \u03C8</span> <span class="rule__border-top__rule-name">(\u2227I)</span> </div> </div>'},{rule:"nd-tree-ce1",label:e.global.t("rules.conjunction.elimination.label1"),desc:`${e.global.t("rules.conjunction.elimination.title")} (\u2227E1)`,tree:'<div class="q-ma-sm rule" rule-tree="nd-tree-ce1"><div><span toReplace>\u03D5</span> \u2227 <span toInput>\u03C8</span></div><div class="rule__border-top"><span toReplace>\u03D5</span><span class="rule__border-top__rule-name">(\u2227E1)</span></div></div>'},{rule:"nd-tree-ce2",label:e.global.t("rules.conjunction.elimination.label2"),desc:`${e.global.t("rules.conjunction.elimination.title")} (\u2227E2)`,tree:'<div class="q-ma-sm rule"> <div><span toInput>\u03C8</span> \u2227 <span toReplace>\u03D5</span></div> <div class="rule__border-top"> <span toReplace>\u03D5</span> <span class="rule__border-top__rule-name">(\u2227E2)</span> </div> </div>'},{rule:"nd-tree-di1",label:e.global.t("rules.disjunction.intro.label1"),desc:`${e.global.t("rules.disjunction.intro.title")} (\u2228I1)`,tree:'<div class="q-ma-sm rule"> <div>\u03D5</div> <div class="rule__border-top"> <span>\u03D5 \u2228 \u03C8</span> <span class="rule__border-top__rule-name">(\u2228I1)</span> </div> </div>'},{rule:"nd-tree-di2",label:e.global.t("rules.disjunction.intro.label2"),desc:`${e.global.t("rules.disjunction.intro.title")} (\u2228I2)`,tree:'<div class="q-ma-sm rule"> <div>\u03C8</div> <div class="rule__border-top"> <span>\u03D5 \u2228 \u03C8 </span> <span class="rule__border-top__rule-name">(\u2228I2)</span> </div> </div>'},{rule:"nd-tree-de",label:e.global.t("rules.disjunction.elimination.label"),desc:`${e.global.t("rules.disjunction.elimination.title")} (\u2228E)`,tree:'<div class="q-ma-sm rule"> <div class="rule__siblings"> <div><span toInput>\u03D5 \u2228 \u03C8</span></div> <div class="rule__hypo"> <div>[<span toDelete>\u03D5</span>]</div> <div class="rule__hypo__dots"> <span>.</span> <span>.</span> <span>.</span> </div> <span toReplace>\u03B8</span> </div> <div class="rule__hypo"> <div>[<span toDelete>\u03C8</span>]</div> <div class="rule__hypo__dots"> <span>.</span> <span>.</span> <span>.</span> </div> <span toReplace>\u03B8</span> </div> </div> <div class="rule__border-top"> <span toReplace>\u03B8</span> <span class="rule__border-top__rule-name">(\u2228E)</span> </div> </div>'},{rule:"nd-tree-ii",label:e.global.t("rules.implication.intro.label"),desc:`${e.global.t("rules.implication.intro.title")} (\u21D2I)`,tree:'<div class="q-ma-sm rule"> <div class="rule__hypo"> <div>[\u03D5]</div> <div class="rule__hypo__dots"> <span>.</span> <span>.</span> <span>.</span> </div> \u03C8 </div> <div class="rule__border-top"> <span>\u03D5 \u21D2 \u03C8</span> <span class="rule__border-top__rule-name">(\u21D2I)</span> </div> </div>'},{rule:"nd-tree-ie",label:e.global.t("rules.implication.elimination.label"),desc:`${e.global.t("rules.implication.elimination.title")} (\u21D2E)`,tree:'<div class="q-ma-sm rule"> <div class="rule__siblings"> <div><span toInput>\u03C8</span></div> <div><span toInput>\u03C8</span> \u21D2 <span toReplace>\u03D5</span></div> </div> <div class="rule__border-top"> <span toReplace>\u03D5</span> <span class="rule__border-top__rule-name">(\u21D2E)</span> </div> </div>'}],Se={class:"text-h6 q-mb-md"},Me={class:"text-body1"},Te={class:"text-body1"},He=["innerHTML"],Qe=["innerHTML"],Ue={__name:"PL-naturalDeduction-tree-rules",setup(ae){const l=se(),C=g(""),y=g(!1),v=g(""),w=g(!1),x=g(!1),$=g(void 0),k=g(""),S=g(""),Q=["nd-tree-ne","nd-tree-ce1","nd-tree-ce2","nd-tree-de","nd-tree-ie"];async function V(u){y.value=!0,C.value=u.label;let c=await A();if(!c){U();return}let _;if(Q.includes(u.value)&&(_=await B(c,u.tree,u.value),!_)){E.create({type:"negative",message:e.global.t("messages.invalidInput")+u.label+"."}),U();return}const d=new L.Parser(L.Grammar.fromCompiled(K)),s=await ke(u.value,c,d.feed(c.replace(" ","")).results[0],_);if(Array.isArray(s)){if(E.create({type:"positive",message:e.global.t("messages.rule")+u.label+e.global.t("messages.applyed")+c+"."}),s[3]){let r=l.getHypotesis.length,R=[];for(let t=0;t<s[3].length;t++)R.push(String.fromCharCode("a".charCodeAt(0)+r)),r++;s[2]=`${s[2]}${R.join(",")}`}l.setSameLeaves(l.getLeaves.length!=new Set(l.getLeaves).size),l.addToHistory(),l.spliceLeaves(c),s[3]&&(l.addHypotesis(s[3]),H.set("pl-hypo",l.getHypotesis)),s[1].forEach(r=>{var i;let R=l.checkHypotesis(r,s[0]),t=(i=s[3])==null?void 0:i.includes(r);t&&(l.hypotesis=l.hypotesis.map(n=>n.hypo==r?{hypo:n.hypo,used:!0}:n)),r!=""&&!(R||t)&&l.pushLeaf(r)}),H.set("pl-leaves",l.getLeaves),H.set("pl-hypo",l.getHypotesis),l.addFormulaToProof(l.proof,s),H.set("pl-proof",l.getProof),l.resetSameLeaves()}else E.create({type:"negative",message:e.global.t("messages.rule")+u.label+e.global.t("messages.notApplyed")+c+"."});U()}function U(){v.value="",k.value="",y.value=!1}function A(){const u=l.getLeaves;return u.length>1?(w.value=!0,new Promise((c,_)=>{const d=G([v,y],([s,r])=>{s!==""&&(w.value=!1,c(s),d()),r==!1&&(w.value=!1,c(!1),d())})})):u[0]}function D(u,c,_){return u.replace(/<span toReplace>(.*?)<\/span>/g,c).replace(/<span toInput>(.*?)<\/span>/g,`<span class="rule__input">${_}</span>`).replace(/<span toDelete>(.*?)<\/span>/g,"")}async function B(u,c,_){x.value=!0;const d=u.length>1?`(${u})`:u;S.value=D(c,d,_=="nd-tree-de"?"\u2228":""),G(k,r=>{S.value=D(c,d,r.length>1?`(${r})`:r)});const s=await new Promise((r,R)=>{const t=G($,i=>{i&&($.value=void 0,x.value=!1,r(k.value),t()),i==!1&&($.value=void 0,x.value=!1,r(!1),t())})});if(s&&!s.includes(",")){const r=new L.Parser(L.Grammar.fromCompiled(K));try{r.feed(s.replace(" ",""))}catch{return E.create({type:"negative",message:e.global.t("messages.formulaIsNotOK")}),!1}return{asString:s,asAst:r.results[0]}}else return s!=!1&&E.create({type:"negative",message:e.global.t("messages.formulaIsNotOK")}),!1}function X(u){const c=new L.Parser(L.Grammar.fromCompiled(K));try{if(c.feed(u.replace(" ","")),c.results.length===0)throw new Error("Formula is not valid.")}catch{return!1}return c.results}return(u,c)=>(h(),O("div",null,[f("div",Se,b(u.$t("rules.ndTree")),1),w.value?(h(),I(J,{key:0,class:"my-card q-my-lg"},{default:o(()=>[a(P,null,{default:o(()=>[f("p",Me,[F(b(u.$t("rules.chooseLeaf"))+" ",1),f("strong",null,b(C.value),1),F(". ")])]),_:1}),a(P,null,{default:o(()=>[a(Y,{modelValue:v.value,"onUpdate:modelValue":c[0]||(c[0]=_=>v.value=_),options:m(l).getLeaves,label:u.$t("rules.leaves")},null,8,["modelValue","options","label"])]),_:1}),a(W,{align:"right"},{default:o(()=>[a(q,{label:u.$t("labels.cancel"),onClick:c[1]||(c[1]=_=>y.value=!1)},null,8,["label"])]),_:1})]),_:1})):j("",!0),x.value?(h(),I(J,{key:1,class:"my-card q-my-lg"},{default:o(()=>[a(P,null,{default:o(()=>[f("p",Te,[F(b(u.$t("rules.inputFormula"))+" ",1),f("strong",null,b(C.value),1),F(". ")])]),_:1}),a(P,null,{default:o(()=>[f("div",{innerHTML:S.value},null,8,He)]),_:1}),a(P,null,{default:o(()=>[a(le,{modelValue:k.value,"onUpdate:modelValue":c[2]||(c[2]=_=>k.value=_),validateFormula:X},null,8,["modelValue"])]),_:1}),a(W,{align:"right"},{default:o(()=>[a(q,{label:u.$t("labels.cancel"),onClick:c[3]||(c[3]=()=>{y.value=!1,$.value=!1})},null,8,["label"]),a(q,{label:u.$t("labels.use"),onClick:c[4]||(c[4]=_=>$.value=!0)},null,8,["label"])]),_:1})]),_:1})):j("",!0),a(re,{class:"q-mx-auto",style:{height:"600px","max-width":"500px"}},{default:o(()=>[a(oe,{bordered:"",separator:"",style:{"border-radius":"4px"}},{default:o(()=>[(h(!0),O(Z,null,ee(m(Ne),_=>te((h(),I(de,{key:_.rule,clickable:"",class:"q-py-md",onClick:d=>V({value:_.rule,label:_.label,tree:_.tree}),disable:!m(l).isProving||y.value},{default:o(()=>[a(ue,{top:""},{default:o(()=>[a(ne,{class:"text-body1 text-primary"},{default:o(()=>[F(b(_.desc),1)]),_:2},1024),f("div",{class:"flex",innerHTML:_.tree},null,8,Qe)]),_:2},1024)]),_:2},1032,["onClick","disable"])),[[ie]])),128))]),_:1})]),_:1})]))}},Ae=[{rule:"nd-fitch-as",label:e.global.t("rules.assumption.label"),desc:`${e.global.t("rules.assumption.title")}`,tree:' <div class="q-ma-sm fitch-proof"> <!-- formulas --> <div> <div> <span class="fitch-index"></span> <div class="fitch-spacer"> <div class="fitch-formula fitch-as">\u03C6</div> </div> </div> <div> <span class="fitch-index"></span> <div class="fitch-formula"></div> </div> </div> <!-- rule --> <div> <div class="fitch-rule--as"></div> </div> </div>'},{rule:"nd-fitch-ae1",label:e.global.t("rules.absurdum.elimination.label1"),desc:`${e.global.t("rules.absurdum.elimination.title")} (\u22A5E1, m)`,tree:'<div class="q-ma-sm fitch-proof"> <!-- formulas --> <div> <div> <span class="fitch-index">m</span> <div class="fitch-formula">\u22A5</div> </div> <div> <span class="fitch-index"></span> <div class="fitch-formula">\u03C6</div> </div> </div> <!-- rule --> <div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">\u22A5E1, m</div> </div> </div>',forInput:{mask:/^(\d+)$/,placeholder:"#"}},{rule:"nd-fitch-ae2",label:e.global.t("rules.absurdum.elimination.label2"),desc:`${e.global.t("rules.absurdum.elimination.title")} (\u22A5E2, m-n)`,tree:'<div class="q-ma-sm fitch-proof"> <!-- formulas --> <div> <div> <span class="fitch-index">m</span> <div class="fitch-spacer"> <div class="fitch-formula fitch-as">\xAC\u03C6</div> </div> </div> <div> <span class="fitch-index">n</span> <div class="fitch-spacer"> <div class="fitch-formula">\u22A5</div> </div> </div> <div> <span class="fitch-index"></span> <div class="fitch-formula">\u03C6</div> </div> </div> <!-- rule --> <div> <div class="fitch-rule--as">&nbsp;</div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">\u22A5E2, m-n</div> </div> </div>',forInput:{mask:/^(\d+-\d+)$/,placeholder:"#-#"}},{rule:"nd-fitch-ni",label:e.global.t("rules.negation.intro.label"),desc:`${e.global.t("rules.negation.intro.title")} (\xACI, m-n)`,tree:'<div class="q-ma-sm fitch-proof"> <!-- formulas --> <div> <div> <span class="fitch-index">m</span> <div class="fitch-spacer"> <div class="fitch-formula fitch-as">\u03C6</div> </div> </div> <div> <span class="fitch-index">n</span> <div class="fitch-spacer"> <div class="fitch-formula">\u22A5</div> </div> </div> <div> <span class="fitch-index"></span> <div class="fitch-formula">\xAC\u03C6</div> </div> </div> <!-- rule --> <div> <div class="fitch-rule--as">&nbsp;</div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">\xACI, m-n</div> </div> </div>',forInput:{mask:/^(\d+-\d+)$/,placeholder:"#-#"}},{rule:"nd-fitch-ne",label:e.global.t("rules.negation.elimination.label"),desc:`${e.global.t("rules.negation.elimination.title")} (\xACE, m, n)`,tree:'  <div class="q-ma-sm fitch-proof"> <!-- formulas --> <div> <div> <span class="fitch-index">m</span> <div class="fitch-formula">\xAC\u03C6</div> </div> <div> <span class="fitch-index">n</span> <div class="fitch-formula">\u03C6</div> </div> <div> <span class="fitch-index"></span> <div class="fitch-formula">\u22A5</div> </div> </div> <!-- rule --> <div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">\xACE, m, n</div> </div> </div>',forInput:{mask:/^(\d+,\d+)$/,placeholder:"#,#"}},{rule:"nd-fitch-ci",label:e.global.t("rules.conjunction.intro.label"),desc:`${e.global.t("rules.conjunction.intro.title")} (\u2227I, m, n)`,tree:'<div class="q-ma-sm fitch-proof"> <div> <div> <span class="fitch-index">m</span> <div class="fitch-formula">\u03C6</div> </div> <div> <span class="fitch-index">n</span> <div class="fitch-formula">\u03C8</div> </div> <div> <span class="fitch-index"></span> <div class="fitch-formula">\u03C6\u2227\u03C8</div> </div> </div> <div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">\u2227I, m, n</div> </div> </div>',forInput:{mask:/^(\d+,\d+)$/,placeholder:"#,#"}},{rule:"nd-fitch-ce1",label:e.global.t("rules.conjunction.elimination.label1"),desc:`${e.global.t("rules.conjunction.elimination.title")} (\u2227E1, m)`,tree:'<div class="q-ma-sm fitch-proof"> <div> <div> <span class="fitch-index">m</span> <div class="fitch-formula">\u03C6\u2227\u03C8</div> </div> <div> <span class="fitch-index"></span> <div class="fitch-formula">\u03C6</div> </div> </div> <div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">\u2227E1, m</div> </div> </div>',forInput:{mask:/^(\d+)$/,placeholder:"#"}},{rule:"nd-fitch-ce2",label:e.global.t("rules.conjunction.elimination.label2"),desc:`${e.global.t("rules.conjunction.elimination.title")} (\u2227E2, m)`,tree:' <div class="q-ma-sm fitch-proof"> <div> <div> <span class="fitch-index">m</span> <div class="fitch-formula">\u03C6\u2227\u03C8</div> </div> <div> <span class="fitch-index"></span> <div class="fitch-formula">\u03C8</div> </div> </div> <div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">\u2227E2, m</div> </div> </div>',forInput:{mask:/^(\d+)$/,placeholder:"#"}},{rule:"nd-fitch-di1",label:e.global.t("rules.disjunction.intro.label1"),desc:`${e.global.t("rules.disjunction.intro.title")} (\u2228I1, m)`,tree:' <div class="q-ma-sm fitch-proof"> <div> <div> <span class="fitch-index">m</span> <div class="fitch-formula">\u03C6</div> </div> <div> <span class="fitch-index"></span> <div class="fitch-formula">\u03C6\u2228\u03C8</div> </div> </div> <div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">\u2228I1, m</div> </div> </div>',forInput:{mask:/^(\d+)$/,placeholder:"#"}},{rule:"nd-fitch-di2",label:e.global.t("rules.disjunction.intro.label2"),desc:`${e.global.t("rules.disjunction.intro.title")} (\u2228I2, m)`,tree:'<div class="q-ma-sm fitch-proof"> <div> <div> <span class="fitch-index">m</span> <div class="fitch-formula">\u03C8</div> </div> <div> <span class="fitch-index"> </span> <div class="fitch-formula">\u03C6\u2228\u03C8</div> </div> </div> <div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">\u2228I2, m</div> </div> </div>',forInput:{mask:/^(\d+)$/,placeholder:"#"}},{rule:"nd-fitch-de",label:e.global.t("rules.disjunction.elimination.label"),desc:`${e.global.t("rules.disjunction.elimination.title")} (\u2228E, m, i-j, k-l)`,tree:'<div class="q-ma-sm fitch-proof"> <div> <div> <span class="fitch-index">m</span> <div class="fitch-formula">\u03C6\u2228\u03C8</div> </div> <div> <span class="fitch-index">i</span> <div class="fitch-spacer"> <div class="fitch-formula fitch-as">\u03C6</div> </div> </div> <div> <span class="fitch-index">j</span> <div class="fitch-spacer"> <div class="fitch-formula">\u03D5</div> </div> </div> <div> <span class="fitch-index">k</span> <div class="fitch-spacer"> <div class="fitch-formula fitch-as">\u03C8</div> </div> </div> <div> <span class="fitch-index">l</span> <div class="fitch-spacer"> <div class="fitch-formula">\u03D5</div> </div> </div> <div> <span class="fitch-index"></span> <div class="fitch-formula">\u03D5</div> </div> </div> <div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule--as">&nbsp;</div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule--as">&nbsp;</div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">\u2228E, m, i-j, k-l</div> </div> </div>',forInput:{mask:/^(\d+,(\d+-\d+),(\d+-\d+))$/,placeholder:"#,#-#,#-#"}},{rule:"nd-fitch-ii",label:e.global.t("rules.implication.intro.label"),desc:`${e.global.t("rules.implication.intro.title")} (\u21D2I, m-n)`,tree:' <div class="q-ma-sm fitch-proof"> <div> <div> <span class="fitch-index">m</span> <div class="fitch-spacer"> <div class="fitch-formula fitch-as">\u03C6</div> </div> </div> <div> <span class="fitch-index">n</span> <div class="fitch-spacer"> <div class="fitch-formula">\u03C8</div> </div> </div> <div> <span class="fitch-index"></span> <div class="fitch-formula">\u03C6\u21D2\u03C8</div> </div> </div> <div> <div class="fitch-rule--as">&nbsp;</div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">\u21D2I, m-n</div> </div> </div>',forInput:{mask:/^(\d+-\d+)$/,placeholder:"#-#"}},{rule:"nd-fitch-ie",label:e.global.t("rules.implication.elimination.label"),desc:`${e.global.t("rules.implication.elimination.title")} (\u21D2E, m, n)`,tree:' <div class="q-ma-sm fitch-proof"> <div> <div> <span class="fitch-index">m</span> <div class="fitch-formula">\u03C6\u21D2\u03C8</div> </div> <div> <span class="fitch-index">n</span> <div class="fitch-formula">\u03C6</div> </div> <div> <span class="fitch-index"></span> <div class="fitch-formula">\u03C8</div> </div> </div> <div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">&nbsp;</div> <div class="fitch-rule">\u21D2E, m, n</div> </div> </div>',forInput:{mask:/^(\d+,\d+)$/,placeholder:"#,#"}}],De={class:"text-h6 q-mb-md"},Ge={class:"text-body1"},Oe={class:"fitch-keyboard"},Be=["innerHTML"],Ke={__name:"PL-naturalDeduction-fitch-rules",setup(ae){const l=se(),C=g(""),y=g(!1),v=["nd-fitch-as","nd-fitch-ae1","nd-fitch-di1","nd-fitch-di2"],w=g(!1),x=g(void 0),$=g(""),k=g(""),S=g(void 0),Q=g(""),V=g();async function U(d,s){y.value=!0,C.value=d,S.value=s==null?void 0:s.mask,Q.value=s==null?void 0:s.placeholder;let r=await B();if(r==!1){A();return}if(!D(r)){A(),E.create({type:"negative",message:e.global.t("messages.invalidInput")+d.label+"."});return}const R=await we(d.value,r.formula,r.rows,JSON.parse(JSON.stringify(l.proof)));R?(E.create({type:"positive",message:e.global.t("messages.rule")+d.label+e.global.t("messages.applyedFitch")}),l.addToHistory(),l.addRowToProof(R),H.set("pl-proof",l.getProof)):E.create({type:"negative",message:e.global.t("messages.rule")+d.label+e.global.t("messages.notApplyedFitch")}),A()}function A(){y.value=!1,C.value="",$.value="",k.value="",S.value=void 0}function D(d){return v.includes(C.value.value)&&d.formula==""?!1:C.value.value=="nd-fitch-as"&&d.formula!=""?!0:!(d.rows==""||d.rows==null)}async function B(){w.value=!0;const d=await new Promise((s,r)=>{const R=G(x,t=>{t&&(x.value=void 0,w.value=!1,s({formula:$.value,rows:k.value}),R()),t==!1&&(x.value=void 0,w.value=!1,s(!1),R())})});if(d&&!d.formula.includes(",")){const s=new L.Parser(L.Grammar.fromCompiled(K));try{s.feed(d.formula.replace(" ",""))}catch{return E.create({type:"negative",message:e.global.t("messages.formulaIsNotOK")}),!1}return{formula:d.formula,rows:d.rows}}else return d!=!1&&E.create({type:"negative",message:e.global.t("messages.formulaIsNotOK")}),!1}function X(d){const s=new L.Parser(L.Grammar.fromCompiled(K));try{if(s.feed(d.replace(" ","")),s.results.length===0)throw new Error("Formula is not valid.")}catch{return!1}return s.results}function u(d){d.preventDefault()}function c(d){const s=V.value.nativeEl.selectionStart;k.value=k.value.slice(0,s)+d+k.value.slice(s),setTimeout(()=>{document.getElementById(V.value.nativeEl.id).setSelectionRange(s+1,s+1)},1)}function _(){const d=V.value.nativeEl.selectionStart;k.value=k.value.slice(0,d-1)+k.value.slice(d),setTimeout(()=>{document.getElementById(V.value.nativeEl.id).setSelectionRange(d-1,d-1)},1)}return(d,s)=>(h(),O(Z,null,[f("div",De,b(d.$t("rules.ndFitch")),1),w.value?(h(),I(J,{key:0,class:"my-card q-my-lg"},{default:o(()=>[a(P,null,{default:o(()=>[f("p",Ge,[F(b(d.$t("rules.inputFormulaFitch"))+" ",1),f("strong",null,b(C.value.label),1),F(". ")])]),_:1}),v.includes(C.value.value)?(h(),I(P,{key:0},{default:o(()=>[a(le,{modelValue:$.value,"onUpdate:modelValue":s[0]||(s[0]=r=>$.value=r),validateFormula:X},null,8,["modelValue"])]),_:1})):j("",!0),S.value?(h(),I(P,{key:1},{default:o(()=>[a(xe,{class:"ls-formula-i",outlined:"",clearable:"",autogrow:"",spellcheck:"false",modelValue:k.value,"onUpdate:modelValue":s[1]||(s[1]=r=>k.value=r),ref_key:"rowsInputElm",ref:V,label:d.$t("logic.chooseRows")+" ("+Q.value+")",rules:[r=>S.value.test(r)||d.$t("logic.badRowFormat")]},null,8,["modelValue","label","rules"]),f("div",Oe,[a(q,{outline:"",onClick:s[2]||(s[2]=r=>c("1")),onMousedown:u,label:"1"}),a(q,{outline:"",onClick:s[3]||(s[3]=r=>c("2")),onMousedown:u,label:"2"}),a(q,{outline:"",onClick:s[4]||(s[4]=r=>c("3")),onMousedown:u,label:"3"}),a(q,{outline:"",onClick:s[5]||(s[5]=r=>c("4")),onMousedown:u,label:"4"}),a(q,{outline:"",onClick:s[6]||(s[6]=r=>c("5")),onMousedown:u,label:"5"}),a(q,{outline:"",onClick:s[7]||(s[7]=r=>c("6")),onMousedown:u,label:"6"}),a(q,{outline:"",onClick:s[8]||(s[8]=r=>c("-")),onMousedown:u,label:"-",class:"fitch-keyboard__double"}),a(q,{outline:"",onClick:s[9]||(s[9]=r=>c(",")),onMousedown:u,label:",",class:"fitch-keyboard__double"}),a(q,{class:"fitch-keyboard__remove fitch-keyboard__double",outline:"",onClick:s[10]||(s[10]=r=>_()),onMousedown:u,label:"\u2190"})])]),_:1})):j("",!0),a(W,{align:"right"},{default:o(()=>[a(q,{label:d.$t("labels.cancel"),onClick:s[11]||(s[11]=()=>{y.value=!1,x.value=!1})},null,8,["label"]),a(q,{label:d.$t("labels.use"),onClick:s[12]||(s[12]=r=>x.value=!0)},null,8,["label"])]),_:1})]),_:1})):j("",!0),a(re,{class:"q-mx-auto",style:{height:"600px","max-width":"500px"}},{default:o(()=>[a(oe,{bordered:"",separator:"",style:{"border-radius":"4px"}},{default:o(()=>[(h(!0),O(Z,null,ee(m(Ae),r=>te((h(),I(de,{key:r.rule,clickable:"",class:"q-py-md",onClick:R=>U({value:r.rule,label:r.label},r.forInput),disable:!m(l).isProving||y.value},{default:o(()=>[a(ue,{top:""},{default:o(()=>[a(ne,{class:"text-body1 text-primary"},{default:o(()=>[F(b(r.desc),1)]),_:2},1024),f("div",{class:"flex",innerHTML:r.tree},null,8,Be)]),_:2},1024)]),_:2},1032,["onClick","disable"])),[[ie]])),128))]),_:1})]),_:1})],64))}},ze={class:"q-my-sm text-center"},We={class:"container"},Je={class:"row justify-center items-stretch gap"},Xe={class:"col-md-7 col-sm-12"},Ye={class:"flex justify-end gap q-mx-xl back-button"},Ze={key:1},el={class:"text-h6 q-my-md"},ll={class:"flex gap"},sl={class:"col-md-4 col-sm-12"},gl={__name:"PropositionalLogic",setup(ae){const l=se();function C(){return ce(l.getInputFormula,l.getMethod)}function y(){let v=ce(l.getInputFormula,l.getMethod);v&&(l.clearTree(),l.getMethod=="ND"&&v.hypothesis&&(l.getNotation=="tree"?(v.hypothesis[0]!=""&&(l.addHypotesis(v.hypothesis),H.set("pl-hypo",l.getHypotesis)),v=v.formula):v.hypothesis.forEach(w=>{l.addRowToProof({depth:1,formula:w,rule:"AS"})})),l.getNotation=="tree"?(l.setProof(v),H.set("pl-proof",l.getProof),l.pushLeaf(v),H.set("pl-leaves",l.getLeaves)):(l.setFitchProoving(),H.set("pl-fitch",l.getConclusion)),H.set("pl-formula",l.getInputFormula),E.create({type:"positive",message:e.global.t("messages.formulaIsOK")}))}return(v,w)=>(h(),I(ye,{style:{"min-height":"100%"}},{default:o(()=>{var x;return[f("h6",ze,b(v.$t("labels.propositional")),1),f("div",We,[f("div",Je,[f("div",Xe,[a(le,{modelValue:m(l).inputFormula,"onUpdate:modelValue":w[0]||(w[0]=$=>m(l).inputFormula=$),validateFormula:C,submit:y},null,8,["modelValue"]),f("div",Ye,[m(l).isProving||m(l).isProven?(h(),I(q,{key:0,outline:"",label:v.$t("labels.remove"),onClick:w[1]||(w[1]=$=>m(l).clearTree())},null,8,["label"])):j("",!0),m(l).history.length?(h(),I(q,{key:1,outline:"",label:v.$t("labels.back"),onClick:w[2]||(w[2]=$=>m(l).retrieveFromHistory())},null,8,["label"])):j("",!0)]),m(l).isProven?(h(),I(me,{key:0,class:"bg-positive q-mx-xl q-my-md text-white",rounded:""},{avatar:o(()=>[a(fe,{name:"check",color:"white"})]),default:o(()=>[F(" "+b(v.$t("messages.isProven")),1)]),_:1})):j("",!0),m(l).getMethod=="ND"&&((x=m(l).getHypotesis)==null?void 0:x.length)>0&&m(l).getHypotesis!="undefined"?(h(),O("div",Ze,[f("div",el,b(v.$t("labels.hypos")),1),f("div",ll,[(h(!0),O(Z,null,ee(m(l).getHypotesis,($,k)=>(h(),O("div",{key:$.hypo},[f("span",null,b(String.fromCharCode("a".charCodeAt(0)+k))+":",1),a(_e,{label:$.hypo,dense:"",outline:"",square:"",color:$.used?"positive":"primary",size:"lg"},null,8,["label","color"])]))),128))])])):j("",!0),m(l).getNotation=="tree"?(h(),I(be,{key:2,proof:m(l).getProof},null,8,["proof"])):j("",!0),m(l).getNotation=="fitch"?(h(),I(ge,{key:3,proof:m(l).getProof,conclusion:m(l).getConclusion},null,8,["proof","conclusion"])):j("",!0)]),f("div",sl,[a(he,{logic:"pl","onUpdate:method":m(l).setMethod,"onUpdate:notation":m(l).setNotation},null,8,["onUpdate:method","onUpdate:notation"]),m(l).getMethod=="GSK"&&m(l).getNotation=="tree"?(h(),I(Ve,{key:0})):j("",!0),m(l).getMethod=="ND"&&m(l).getNotation=="tree"?(h(),I(Ue,{key:1})):j("",!0),m(l).getMethod=="ND"&&m(l).getNotation=="fitch"?(h(),I(Ke,{key:2})):j("",!0)])])])]}),_:1}))}};export{gl as default};
